delta <- dataset %>%
select(-genuine.rt,-ies) %>%
spread(session, genuine.accuracy) %>%
'colnames<-'(c("subject" , "emotion",   "group" ,"pre" , "post1" , "post2")) %>%
mutate(delta1 = post1-pre,
delta2 = post2-pre,
delta1norm = post1-pre/post1+pre,
delta2norm = post2-pre/post2+pre)
# load("data/dataset.RData")
dataset <- read_excel("objects/accuracy_genuine_lf.xlsx", sheet = "Sheet 1") %>%
mutate( ies =genuine.rt / genuine.accuracy) %>%
filter(group != "M1", session != 2,subject != 11, subject != 14, subject != 17, subject != 22)
data <- dataset
# data preparation
data$nt <- 48 # nb trials
data$scorep <- data$ies
data <- data%>%
mutate(score = as.numeric(scorep),
group = as.factor(group),
session = as.factor(session),
emotion = as.factor(emotion))
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy optimized
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("session",002)
# Data loading
#dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
data <- dataset
i <- 37
pts <- i
n_clips <- length(unique(dataset$file))-1
dataset <- data %>%
filter(participant == pts)
group <- unique(dataset$group)
group
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy optimized
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("session",002)
# Data loading
#dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
data <- dataset
for(i in 1:n){
pts <- i
n_clips <- length(unique(dataset$file))-1
dataset <- data %>%
filter(participant == pts)
group <- unique(dataset$group)
# Data summarization for participants
summary_participants <- dataset %>%
filter(Trials_loop.thisRepN == 0) %>%
group_by( participant, emotion, elicitation, session) %>%
summarize_data()
# Data summarization for emotions
summary_emotion <- summary_participants %>%
mutate(elicitation = "Total") %>%
group_by( emotion,elicitation, session) %>%
summarize_summary()
# Data summarization for emotion and elicitation
summary_tot <- summary_participants %>%
group_by( emotion, session, elicitation) %>%
summarize_summary()
# Summarize data by emotion, session, and elicitation
summary_tot <- summary_participants %>%
select( -participant)
# Combine emotion and total summaries and arrange them
final_dataset <- bind_rows(summary_emotion, summary_tot) %>%
mutate(elicitation = factor(elicitation, levels = c("genuine", "paused", "Total"))) %>%
arrange(emotion, session, elicitation)
wide_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
# genuine.rt.correct = genuine.rt1.mean,
# genuine.rt.incorrect = genuine.rt0.mean,
# genuine.slider.correct = genuine.slider1.mean,
# genuine.slider.incorrect = genuine.slider0.mean,
# emotion.accuracy = emotion.acc.mean,
# emotion.slider.correct = emotion.slider1.mean,
# emotion.slider.incorrect = emotion.slider0.mean,
subject = i,
cat = paste0(emotion,".",session)) %>%
select(subject,cat,
genuine.accuracy
# genuine.rt.correct,
# genuine.rt.incorrect,
# genuine.slider.correct,
# genuine.slider.incorrect,
# emotion.accuracy,
# emotion.slider.correct,
# emotion.slider.incorrect
) %>%
spread(cat,genuine.accuracy)
wide_format$group <- group
long_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
genuine.rt = genuine.rt.mean,
genuine.slider.correct = genuine.slider1.mean,
genuine.slider.incorrect = genuine.slider0.mean,
emotion.accuracy = emotion.acc.mean,
emotion.slider.correct = emotion.slider1.mean,
emotion.slider.incorrect = emotion.slider0.mean,
subject = i) %>%
select(subject,session, emotion,
genuine.accuracy,genuine.rt)
long_format$group <- group
#save data.frame
write.xlsx(final_dataset, paste0("objects/summary_subjects_",pts,"_",group,".xlsx"))
write.csv(long_format, paste0("objects/long_format_", pts, "_", group, "lf.csv"))
write.csv(wide_format, paste0("objects/wide_format_", pts, "_", group, "wf.csv"))
# table_tot <- final_dataset %>%
#   mutate(genuine.acc = ifelse(is.na(genuine.acc.mean) ,"",
#                               ifelse(is.na(genuine.acc.sd)|genuine.acc.sd == 0,paste(genuine.acc.mean),
#                                      paste(genuine.acc.mean, "±", genuine.acc.sd))),
#          genuine.rt = ifelse(is.na(genuine.rt1.mean) ,"",
#                              ifelse(is.na(genuine.rt1.sd)|genuine.rt1.sd == 0,paste(genuine.rt1.mean),
#                                     paste(genuine.rt1.mean, "±", genuine.rt1.sd))),
#          genuine.slider1 = ifelse(is.na(genuine.slider1.mean) ,"",
#                                   ifelse(is.na(genuine.slider1.sd)|genuine.slider1.sd == 0,paste(genuine.slider1.mean),
#                                          paste(genuine.slider1.mean, "±", genuine.slider1.sd))),
#          genuine.slider0 = ifelse(is.na(genuine.slider0.mean) ,"",
#                                   ifelse(is.na(genuine.slider0.sd)|genuine.slider0.sd == 0,paste(genuine.slider0.mean),
#                                          paste(genuine.slider0.mean, "±", genuine.slider0.sd))),
#          emotion.acc = ifelse(is.na(emotion.acc.mean) ,"",
#                               ifelse(is.na(emotion.acc.sd)|emotion.acc.sd == 0,paste(emotion.acc.mean),
#                                      paste(emotion.acc.mean, "±", emotion.acc.sd))),
#          emotion.slider1 = ifelse(is.na(emotion.slider1.mean) ,"",
#                                   ifelse(is.na(emotion.slider1.sd)|emotion.slider1.sd == 0,paste(emotion.slider1.mean),
#                                          paste(emotion.slider1.mean, "±", emotion.slider1.sd))),
#          emotion.slider0 = ifelse(is.na(emotion.slider0.mean) ,"",
#                                   ifelse(is.na(emotion.slider0.sd)|emotion.slider0.sd == 0,paste(emotion.slider0.mean),
#                                          paste(emotion.slider0.mean, "±", emotion.slider0.sd)))) %>%
#   select(emotion,session,elicitation,
#          genuine.acc,genuine.rt,genuine.slider1,genuine.slider0,
#          emotion.acc,emotion.slider1,emotion.slider0)
#
#
# # Create and format the flextable
# table <- table_tot%>%
#   flextable() %>%
#   autofit() %>%
#   theme_vanilla() %>%
#   fontsize(part = "all", size = 7)%>%
#   set_header_labels(values = list(
#     emotion = "Emotion",
#     session = "Session",
#     elicitation = "Elicitation",
#     file = "Mp4",
#     genuine.acc = "Accuracy",
#     genuine.rt = " Rt ",
#     emotion.acc = "Accuracy",
#     genuine.slider1 = "Slider correct",
#     genuine.slider0 = "Slider incorrect",
#     emotion.slider1 = "Slider correct",
#     emotion.slider0 = "Slider incorrect")) %>%
#   add_header_row(values = c(paste("Pts =",pts),"","", "Genuine", "Genuine","Genuine", "Genuine",
#                             "Emotion","Emotion","Emotion")) %>%
#   merge_v(j = c(1:3)) %>%
#   merge_h(part = "header") %>%
#   align(align = "center", part = "all") %>%
#   width(j = 1:10, width = .8) %>%
#   bold( part = "body", i = c(3, 6, 9,12,15,18,21,24,27), bold = TRUE) %>%
#   set_caption("Summary Participant")
#
#
#
# # Printing the table for preview
# table
#
#
# # Creating a Word document with the table
# doc <- officer::read_docx()
# doc <- body_add_flextable(doc, value = table)
# #doc <- doc %>% officer::body_end_section_landscape()
# # doc <- body_add_par(doc, value = "", style = "Normal") %>%
# #   slip_in_section(landscape = TRUE, page_size = officer::page_size(orient = "landscape"))
#
#
# print(doc, target = paste0("objects/summary_subjects_",pts,".docx"))
}
dataset_long <- list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE) %>%
lapply(.,function(x) read.csv(x, sep=",", header=TRUE,stringsAsFactors = FALSE ))%>%
bind_rows(.id = "subject") %>%
select(-X)
write.xlsx(dataset_long, paste0("objects/accuracy_genuine_lf.xlsx"))
#################################################
#
# END
#
#################################################
#  Script for GENUINE Study - Pilot accuracy optimized
#################################################
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy optimized
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("session",002)
# Data loading
#dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
data <- dataset
i<-37
pts <- i
n_clips <- length(unique(dataset$file))-1
dataset <- data %>%
filter(participant == pts)
group <- unique(dataset$group)
summary_participants <- dataset %>%
filter(Trials_loop.thisRepN == 0) %>%
group_by( participant, emotion, elicitation, session) %>%
summarize_data()
# Data summarization for emotions
summary_emotion <- summary_participants %>%
mutate(elicitation = "Total") %>%
group_by( emotion,elicitation, session) %>%
summarize_summary()
# Data summarization for emotion and elicitation
summary_tot <- summary_participants %>%
group_by( emotion, session, elicitation) %>%
summarize_summary()
# Summarize data by emotion, session, and elicitation
summary_tot <- summary_participants %>%
select( -participant)
# Combine emotion and total summaries and arrange them
final_dataset <- bind_rows(summary_emotion, summary_tot) %>%
mutate(elicitation = factor(elicitation, levels = c("genuine", "paused", "Total"))) %>%
arrange(emotion, session, elicitation)
wide_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
# genuine.rt.correct = genuine.rt1.mean,
# genuine.rt.incorrect = genuine.rt0.mean,
# genuine.slider.correct = genuine.slider1.mean,
# genuine.slider.incorrect = genuine.slider0.mean,
# emotion.accuracy = emotion.acc.mean,
# emotion.slider.correct = emotion.slider1.mean,
# emotion.slider.incorrect = emotion.slider0.mean,
subject = i,
cat = paste0(emotion,".",session)) %>%
select(subject,cat,
genuine.accuracy
# genuine.rt.correct,
# genuine.rt.incorrect,
# genuine.slider.correct,
# genuine.slider.incorrect,
# emotion.accuracy,
# emotion.slider.correct,
# emotion.slider.incorrect
) %>%
spread(cat,genuine.accuracy)
wide_format$group <- group
long_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
genuine.rt = genuine.rt.mean,
genuine.slider.correct = genuine.slider1.mean,
genuine.slider.incorrect = genuine.slider0.mean,
emotion.accuracy = emotion.acc.mean,
emotion.slider.correct = emotion.slider1.mean,
emotion.slider.incorrect = emotion.slider0.mean,
subject = i) %>%
select(subject,session, emotion,
genuine.accuracy,genuine.rt)
long_format
wide_format
paste0("objects/long_format_", pts, "_", group, "lf.csv")
write.xlsx(final_dataset, paste0("objects/summary_subjects_",pts,"_",group,".xlsx"))
write.csv(long_format, paste0("objects/long_format_", pts, "_", group, "lf.csv"))
write.csv(wide_format, paste0("objects/wide_format_", pts, "_", group, "wf.csv"))
dataset_long <- list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE) %>%
lapply(.,function(x) read.csv(x, sep=",", header=TRUE,stringsAsFactors = FALSE ))%>%
bind_rows(.id = "subject") %>%
select(-X)
dataset_long
View(dataset_long)
dataset_long <- list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE)
list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE)
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy subject table
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("participant",37)
# Data loading
dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
#replace_csv("session",2)
# Assign participants to groups based on control group membership
control_group <- c(6,7,8,9,10,15,16,18,20,21,23,24,28,29,30) # Define which participant IDs are in the control group
m1_group <- c(31,32,33,34,35,36)
# Prepare the dataset for analysis
dataset <- dataset %>%
mutate(ccPAS = ifelse(participant %in% control_group,"STS_IFG",
ifelse(participant %in% m1_group,"M1_IFG", "IFG_STS")),
group = ifelse(participant %in% control_group,"Control",
ifelse(participant %in% m1_group,"M1","Experimental"))) %>%
filter(Trials_loop.thisRepN == 0)
dataset
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("participant",37)
# Data loading
dataset_concatenation("dataset")
load("data/dataset.RData")
View(dataset)
control_group <- c(6,7,8,9,10,15,16,18,20,21,23,24,28,29,30) # Define which participant IDs are in the control group
m1_group <- c(31,32,33,34,35,36)
# Prepare the dataset for analysis
dataset <- dataset %>%
mutate(ccPAS = ifelse(participant %in% control_group,"STS_IFG",
ifelse(participant %in% m1_group,"M1_IFG", "IFG_STS")),
group = ifelse(participant %in% control_group,"Control",
ifelse(participant %in% m1_group,"M1","Experimental"))) %>%
filter(Trials_loop.thisRepN == 0)
dataset$id <- dataset$participant
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy subject table
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("participant",37)
# Data loading
dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
#replace_csv("session",2)
# Assign participants to groups based on control group membership
control_group <- c(6,7,8,9,10,15,16,18,20,21,23,24,28,29,30) # Define which participant IDs are in the control group
m1_group <- c(31,32,33,34,35,36)
# Prepare the dataset for analysis
dataset <- dataset %>%
mutate(ccPAS = ifelse(participant %in% control_group,"STS_IFG",
ifelse(participant %in% m1_group,"M1_IFG", "IFG_STS")),
group = ifelse(participant %in% control_group,"Control",
ifelse(participant %in% m1_group,"M1","Experimental"))) %>%
filter(Trials_loop.thisRepN == 0)
dataset$id2 <- dataset$participant
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy subject table
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("participant",37)
# Data loading
dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
#replace_csv("session",2)
# Assign participants to groups based on control group membership
control_group <- c(6,7,8,9,10,15,16,18,20,21,23,24,28,29,30) # Define which participant IDs are in the control group
m1_group <- c(31,32,33,34,35,36)
# Prepare the dataset for analysis
dataset <- dataset %>%
mutate(ccPAS = ifelse(participant %in% control_group,"STS_IFG",
ifelse(participant %in% m1_group,"M1_IFG", "IFG_STS")),
group = ifelse(participant %in% control_group,"Control",
ifelse(participant %in% m1_group,"M1","Experimental"))) %>%
filter(Trials_loop.thisRepN == 0)
# Saving on objects in RData format
save(dataset,
file = "data/dataset.RData")
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("session",002)
# Data loading
#dataset_concatenation("dataset")
load("data/dataset.RData")
# Count participants and clips
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
data <- dataset
i <- 37
pts <- i
n_clips <- length(unique(dataset$file))-1
dataset <- data %>%
filter(participant == pts)
group <- unique(dataset$group)
group
summary_participants <- dataset %>%
filter(Trials_loop.thisRepN == 0) %>%
group_by( participant, emotion, elicitation, session) %>%
summarize_data()
summary_emotion <- summary_participants %>%
mutate(elicitation = "Total") %>%
group_by( emotion,elicitation, session) %>%
summarize_summary()
# Data summarization for emotion and elicitation
summary_tot <- summary_participants %>%
group_by( emotion, session, elicitation) %>%
summarize_summary()
summary_tot <- summary_participants %>%
select( -participant)
summary_tot
View(summary_tot)
# Combine emotion and total summaries and arrange them
final_dataset <- bind_rows(summary_emotion, summary_tot) %>%
mutate(elicitation = factor(elicitation, levels = c("genuine", "paused", "Total"))) %>%
arrange(emotion, session, elicitation)
View(final_dataset)
wide_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
# genuine.rt.correct = genuine.rt1.mean,
# genuine.rt.incorrect = genuine.rt0.mean,
# genuine.slider.correct = genuine.slider1.mean,
# genuine.slider.incorrect = genuine.slider0.mean,
# emotion.accuracy = emotion.acc.mean,
# emotion.slider.correct = emotion.slider1.mean,
# emotion.slider.incorrect = emotion.slider0.mean,
subject = i,
cat = paste0(emotion,".",session)) %>%
select(subject,cat,
genuine.accuracy
# genuine.rt.correct,
# genuine.rt.incorrect,
# genuine.slider.correct,
# genuine.slider.incorrect,
# emotion.accuracy,
# emotion.slider.correct,
# emotion.slider.incorrect
) %>%
spread(cat,genuine.accuracy)
wide_format
wide_format$group <- group
wide_format
long_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
genuine.rt = genuine.rt.mean,
genuine.slider.correct = genuine.slider1.mean,
genuine.slider.incorrect = genuine.slider0.mean,
emotion.accuracy = emotion.acc.mean,
emotion.slider.correct = emotion.slider1.mean,
emotion.slider.incorrect = emotion.slider0.mean,
subject = i) %>%
select(subject,session, emotion,
genuine.accuracy,genuine.rt)
long_format$group <- group
long_format
write.xlsx(final_dataset, paste0("objects/summary_subjects_",pts,"_",group,".xlsx"))
write.csv(long_format, paste0("objects/long_format_", pts, "_", group, "lf.csv"))
write.csv(wide_format, paste0("objects/wide_format_", pts, "_", group, "wf.csv"))
dataset_long <- list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE) %>%
lapply(.,function(x) read.csv(x, sep=",", header=TRUE,stringsAsFactors = FALSE ))%>%
bind_rows(.id = "subject") %>%
select(-X)
list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE)
dataset_long <- list.files(path="objects/",pattern="\\lf.csv$", full.names = TRUE) %>%
lapply(.,function(x) read.csv(x, sep=",", header=TRUE,stringsAsFactors = FALSE ))
