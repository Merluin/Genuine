###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        05/03/2024
#  Description: GLM ACCURACY GENUINE
#
#  Update:      05/03/2024
###########################################################################

# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts


# Load dependencies
devtools::load_all() # Load necessary functions and packages

# Data loading
# load("data/dataset.RData") 
dataset <- read_excel("objects/accuracy_genuine_lf.xlsx", sheet = "Sheet 1") %>%
  mutate( ies =genuine.rt / genuine.accuracy,
          group = ifelse(group == "Experimental",group,"ctrl")) %>%
  filter(session != 2, subject != 8,subject != 11,subject != 19,subject != 30,
         subject != 31,subject != 32,subject != 33,subject != 34,subject != 35)

unique(dataset$group)
unique(dataset$subject)
unique(dataset$session)

aov_ez("subject", "genuine.accuracy",dataset,within = c("session", "emotion"), between = "group" )

# model selection
data <- dataset
# data preparation
data$nt <- 48 # nb trials
data$scorep <- data$genuine.accuracy

data <- data%>%
  mutate(scorep = as.numeric(scorep),
         group = as.factor(group),
         session = as.factor(session),
         emotion = as.factor(emotion))

contrasts(data$group) <- contr.sum(length(unique(data$group)))
contrasts(data$emotion) <- contr.sum(length(unique(data$emotion)))
contrasts(data$session) <- contr.sum(length(unique(data$session)))
# # Define a custom contrast matrix
# custom_contrasts <- matrix(c(
#   2, -1, -1,  # Contrast 1: Pre-treatment vs. average of both post-treatments
#   -1,  1,  0,  # Contrast 2: Post-treatment1 vs. Pre-treatment
#   -1,  0,  1   # Contrast 3: Post-treatment2 vs. Pre-treatment
# ), byrow = TRUE, nrow = 3)
# # Name the rows and columns for clarity
# rownames(custom_contrasts) <- c("Pre vs Post Avg", "Post1 vs Pre", "Post2 vs Pre")
# colnames(custom_contrasts) <- levels(data$session)
# # Assign the custom contrasts to the factor
# contrasts(data$session) <- custom_contrasts


fit0 <- glmer(scorep ~ 1 + (1|subject),
             data = data,
             family = binomial(link = "logit"),
             weights = nt)
fit1 <- glmer(scorep ~ group + (1|subject),
             data = data,
             family = binomial(link = "logit"),
             weights = nt)
fit2 <- glmer(scorep ~ session + (1|subject),
              data = data,
              family = binomial(link = "logit"),
              weights = nt)
fit3 <- glmer(scorep ~ emotion + (1|subject),
              data = data,
              family = binomial(link = "logit"),
              weights = nt)
fit4 <- glmer(scorep ~ group * session  + (1|subject),
             data = data,
             family = binomial(link = "logit"),
             weights = nt)
fit5 <- glmer(scorep ~ group * emotion  + (1|subject),
              data = data,
              family = binomial(link = "logit"),
              weights = nt)
fit6 <- glmer(scorep ~ session * group * emotion + (1|subject),
             data = data,
             family = binomial(link = "logit"),
             weights = nt)

# fit0 <- lmer(scorep ~ 1 + (1|subject),
#              data = data,
#              weights = nt)
# fit1 <- lmer(scorep ~ group + (1|subject),
#               data = data,
#               weights = nt)
# fit2 <- lmer(scorep ~ session + (1|subject),
#               data = data,
#               weights = nt)
# fit3 <- lmer(scorep ~ emotion + (1|subject),
#               data = data,
#               weights = nt)
# fit4 <- lmer(scorep ~ group * session  + (1|subject),
#               data = data,
#               weights = nt)
# fit5 <- lmer(scorep ~ group * emotion  + (1|subject),
#               data = data,
#               weights = nt)
# fit6 <- lmer(scorep ~ session * group * emotion + (1|subject),
#                data = data,
#                weights = nt)

anova(fit0,fit1,fit2,fit3,fit4,fit5,fit6)


fit <- fit6

plot(allEffects(fit))

car::Anova(fit, type = "III")

visualize(fit6, plot = "model")

main_emotion <- emmeans(fit, pairwise ~ emotion, adjust = "bonf")
inter_groupemotion <- emmeans(fit, pairwise ~ session | group | emotion, adjust = "bonf")




#################################################
# 
# END
#
#################################################
#  Script for GENUINE Study - GLM ACCURACY GENUINE
#################################################


# Initialize a data frame to store the results
exclusion_results <- data.frame(
  subject_excluded_1 = character(), 
  subject_excluded_2 = character(),
  subject_excluded_3 = character(), 
  subject_excluded_4 = character(), 
  p_value = numeric(), 
  stringsAsFactors = FALSE
)

# Get a list of all unique participants
participant_list <- unique(data$subject)

# Generate all combinations of two participants to be excluded
participant_combinations <- combn(participant_list, 3)

# Loop through each combination of two participants
for (i in 1:ncol(participant_combinations)) {
  
  # Exclude the current combination of two participants from the analysis
  excluded_participants <- participant_combinations[, i]
  subset_data <- data[!data$subject %in% excluded_participants, ]
  
  # Run the ANOVA without the current combination of two participants
  fit <- lmer(scorep ~ session * group * emotion + (1|subject),
               data = subset_data,
               weights = nt)
  
  anova <- car::Anova(fit, type = "III")
  # Store the results
  exclusion_results <- rbind(exclusion_results, data.frame(
    subject_excluded_1 = excluded_participants[1], 
    subject_excluded_2 = excluded_participants[2], 
    subject_excluded_1 = excluded_participants[3], 
    subject_excluded_2 = excluded_participants[4], 
    p_value = anova$`Pr(>Chisq)`[8]
  ))
}

# Find the combination that yields the maximum p_value_elicitation

range(exclusion_results$p_value)

combination <- which.min(exclusion_results$p_value)

exclusion_results[combination,]
