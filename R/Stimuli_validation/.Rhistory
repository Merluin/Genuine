pivot_longer(cols = c(Emotion_intensity,Emotion_accuracy), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value)
table_validation <- rbind(
EA_dataset %>%
ungroup() %>%
group_by(File.emotion) %>%
summarise(
mean = round(mean(EIJ.intensity, na.rm = TRUE), 2),
sd = round(sd(EIJ.intensity, na.rm = TRUE), 2)) %>%
mutate(
Emphatic_Accuracy = paste(mean, "±", sd)) %>%
select(File.emotion, Emphatic_Accuracy) %>%  # Select only the final formatted columns
pivot_longer(cols = Emphatic_Accuracy, names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value)
dataset %>%
table_validation <- rbind(
SDT_genuine %>%
group_by(File.emotion) %>%
summarise(d_mean = round(mean(d_prime),2),
d_sd = round(mean(d_prime),2),
c_mean = round(mean(c),2),
c_sd = round(mean(c),2)) %>%
mutate(Sensitivity_d_prime = paste(d_mean, "±", d_sd),
Bias_c = paste(c_mean, "±", c_sd)) %>%
select(File.emotion, Sensitivity_d_prime, Bias_c) %>%  # Select only the necessary columns
pivot_longer(cols = c(Sensitivity_d_prime, Bias_c), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
EA_dataset %>%
ungroup() %>%
group_by(File.emotion) %>%
summarise(
mean = round(mean(EIJ.intensity, na.rm = TRUE), 2),
sd = round(sd(EIJ.intensity, na.rm = TRUE), 2)) %>%
mutate(
Emphatic_Accuracy = paste(mean, "±", sd)) %>%
select(File.emotion, Emphatic_Accuracy) %>%  # Select only the final formatted columns
pivot_longer(cols = Emphatic_Accuracy, names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
dataset %>%
filter(EIJ.accuracy == 1)%>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(AED.intensity), na.rm = TRUE),
accuracy = mean(abs(AED.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
Genuine_intensity = paste(mean_silder, "±", sd_slider),
Genuine_accuracy = paste(mean_acc, "±", sd_acc),) %>%
select(File.emotion, Genuine_intensity,Genuine_accuracy) %>%  # Select only the final formatted columns
pivot_longer(cols = c(Genuine_intensity,Genuine_accuracy), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
dataset %>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(EIJ.intensity), na.rm = TRUE),
accuracy = mean(abs(EIJ.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
Emotion_intensity = paste(mean_silder, "±", sd_slider),
Emotion_accuracy = paste(mean_acc, "±", sd_acc),) %>%
select(File.emotion, Emotion_intensity,Emotion_accuracy) %>%  # Select only the final formatted columns
pivot_longer(cols = c(Emotion_intensity,Emotion_accuracy), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value)
)
table_validation
rm(list=ls()) # remove all objects
# Functions ---------------------------------------------------------------
devtools::load_all()
# Pre-processing-----------------------------------------------------------
# replace_csv("education",NA)
run_script("scripts/Dataset.R") # description in /docs/Dataset_description.html
run_script("scripts/Export_xlsx.R") # return data/Genuine_summary_full_pts.xlsx
table_validation <- rbind(
dataset %>%
filter(EIJ.accuracy == 1)%>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(AED.intensity), na.rm = TRUE),
accuracy = mean(abs(AED.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
#Genuine_intensity = paste(mean_silder, "±", sd_slider),
AED = paste(mean_acc, "±", sd_acc)) %>%
select(File.emotion, AED) %>%  # Select only the final formatted columns
pivot_longer(cols = c(AED), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
SDT_genuine %>%
group_by(File.emotion) %>%
summarise(d_mean = round(mean(d_prime),2),
d_sd = round(mean(d_prime),2),
c_mean = round(mean(c),2),
c_sd = round(mean(c),2)) %>%
mutate(Sensitivity_d_prime = paste(d_mean, "±", d_sd),
Bias_c = paste(c_mean, "±", c_sd)) %>%
select(File.emotion, Sensitivity_d_prime, Bias_c) %>%  # Select only the necessary columns
pivot_longer(cols = c(Sensitivity_d_prime, Bias_c), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
dataset %>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(EIJ.intensity), na.rm = TRUE),
accuracy = mean(abs(EIJ.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
#Emotion_accuracy = paste(mean_acc, "±", sd_acc),
EIJ = paste(mean_silder, "±", sd_slider)) %>%
select(File.emotion, EIJ) %>%  # Select only the final formatted columns
pivot_longer(cols = c(EIJ), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
EA_dataset %>%
ungroup() %>%
group_by(File.emotion) %>%
summarise(
mean = round(mean(EIJ.intensity, na.rm = TRUE), 2),
sd = round(sd(EIJ.intensity, na.rm = TRUE), 2)) %>%
mutate(
Emphatic_Accuracy = paste(mean, "±", sd)) %>%
select(File.emotion, Emphatic_Accuracy) %>%  # Select only the final formatted columns
pivot_longer(cols = Emphatic_Accuracy, names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value)
)
table_validation
table_validation <- rbind(
dataset %>%
filter(EIJ.accuracy == 1)%>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(AED.intensity), na.rm = TRUE),
accuracy = mean(abs(AED.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
#Genuine_intensity = paste(mean_silder, "±", sd_slider),
AED = paste(mean_acc, "±", sd_acc)) %>%
select(File.emotion, AED) %>%  # Select only the final formatted columns
pivot_longer(cols = c(AED), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
SDT_genuine %>%
group_by(File.emotion) %>%
summarise(d_mean = round(mean(d_prime),2),
d_sd = round(mean(d_prime),2),
c_mean = round(mean(c),2),
c_sd = round(mean(c),2)) %>%
mutate(Sensitivity_d_prime = paste(d_mean, "±", d_sd),
Bias_c = paste(c_mean, "±", c_sd)) %>%
select(File.emotion, Sensitivity_d_prime, Bias_c) %>%  # Select only the necessary columns
pivot_longer(cols = c(Sensitivity_d_prime, Bias_c), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
dataset %>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(EIJ.intensity), na.rm = TRUE),
accuracy = mean(abs(EIJ.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
#Emotion_accuracy = paste(mean_acc, "±", sd_acc),
EIJ = paste(mean_silder, "±", sd_slider)) %>%
select(File.emotion, EIJ) %>%  # Select only the final formatted columns
pivot_longer(cols = c(EIJ), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
EA_dataset %>%
ungroup() %>%
group_by(File.emotion) %>%
summarise(
mean = round(mean(EIJ.intensity, na.rm = TRUE), 2),
sd = round(sd(EIJ.intensity, na.rm = TRUE), 2)) %>%
mutate(
EA = paste(mean, "±", sd)) %>%
select(File.emotion, EA) %>%  # Select only the final formatted columns
pivot_longer(cols = EA, names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value)
)
table_validation
# Pre-processing-----------------------------------------------------------
# replace_csv("education",NA)
run_script("scripts/Dataset.R") # description in /docs/Dataset_description.html
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        20/05/2024
#  Description: dataset export to xlsx
#
#  Update:      18/09/2024
###########################################################################
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
# Data loading
load("data/validation_dataset.RData")
wb <- createWorkbook()
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "d_prime")
# Write data to the corresponding sheet
writeData(wb, sheet = "d_prime", d_wide)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "criterion")
# Write data to the corresponding sheet
writeData(wb, sheet = "criterion", c_wide)
# addWorksheet(wb, sheetName = "accuracy.emotion")
# # Write data to the corresponding sheet
# writeData(wb, sheet = "accuracy.emotion", emotion_accuracy)
#
# addWorksheet(wb, sheetName = "accuracy.genuine")
# # Write data to the corresponding sheet
# writeData(wb, sheet = "accuracy.genuine", genuine_accuracy)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "EA")
# Write data to the corresponding sheet
writeData(wb, sheet = "EA", EA)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "slider.genuine")
# Write data to the corresponding sheet
writeData(wb, sheet = "slider.genuine", genuine_intensity)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "slider.emotion")
# Write data to the corresponding sheet
writeData(wb, sheet = "slider.emotion", emotion_intensity)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "demography")
# Write data to the corresponding sheet
writeData(wb, sheet = "demography", demography)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "Table.metrics")
# Write data to the corresponding sheet
writeData(wb, sheet = "Table.metrics", table_validation)
# Save the workbook
saveWorkbook(wb, "data/Validation_summary_full_pts.xlsx", overwrite = TRUE)
#################################################
#
# END
#
#################################################
#  Script for Genuine Study - xlsx
#################################################
#  Update:      18/09/2024
###########################################################################
rm(list=ls()) # remove all objects
# Functions ---------------------------------------------------------------
devtools::load_all()
# Pre-processing-----------------------------------------------------------
# replace_csv("education",NA)
run_script("scripts/Dataset.R") # description in /docs/Dataset_description.html
run_script("scripts/Export_xlsx.R")
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
# Description: This script aggregates all .csv files generated by PsychoPy
#              and compiles them into a single .RData file for streamlined analysis.
#
#  Update:      08/09/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("session",2) # function to correct error in coding metadata from psychopy
# Data loading
datasetname <- "validation_dataset"
dataset_concatenation("original_data/psychopy",datasetname) # aggregates all .csv files
load(paste0("data/",datasetname,".RData") )
# Count participants
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
target <- c("29_rg_2.mp4", "19_rg_5.mp4", "16_rg_2.mp4",
"1_rs_3.mp4", "10_rs_4.mp4", "19_rs_3.mp4",
"29_pg_1.mp4", "3_pg_1.mp4", "15_pg_2.mp4",
"55_ps_2.mp4", "20_ps_3.mp4", "9_fg_1.mp4",
"40_fg_1.mp4", "45_fg_2.mp4", "44_fs_1.mp4",
"49_fs_2.mp4", "22_fs_1.mp4")
dataset <- dataset %>%
mutate(excluded = ifelse(file %in% target, 1, 0))
# Retain only experimental trials and create columns for the ccPAS protocol and group assignment
dataset <- dataset %>%
filter(Trials_loop.thisRepN == 0) %>%
mutate(Emotion = case_when(emotion == "anger" ~ "Anger",
emotion == "fear" ~ "Fearful",
emotion == "happiness" ~ "Happiness"),
Emotion = factor(Emotion, levels = c("Anger", "Fearful","Happiness")),
gender = ifelse(tolower(gender) == "m", "male", "female"),
Pt.id = sprintf("%02d", as.integer(participant))) %>% # Recode gender for clarity
# Select and rename columns for the final dataset
select(
File.name = file,
File.emotion = Emotion,
File.elicitation = elicitation,
File.excluded = excluded,
Pt.id,
Pt.age = eta,
Pt.gender = gender,
AED.accuracy = gesino_kb.corr,
AED.resp = gesino_kb.keys,
AED.intensity = genuine_slider.response,
EIJ.accuracy = accuracy,
EIJ.label = emotion_ms.clicked_name,
EIJ.intensity = intensity_slider.response,
Exp.date = date,
Exp.name = expName,
Exp.version = psychopyVersion,
Exp.frameRate = frameRate
) %>%
arrange(Pt.id) %>%
filter(File.excluded != 1)
# data for EAD
emotion_accuracy <- dataset %>%
group_by(Pt.id,File.emotion, File.elicitation) %>%
summarise(accuracy = mean(EIJ.accuracy,na.rm = TRUE)) %>%
ungroup() %>%
mutate(label = paste0(File.emotion,".",File.elicitation)) %>%
select(-c(File.emotion,File.elicitation)) %>%
spread(label, accuracy)
genuine_accuracy <- dataset %>%
group_by(Pt.id,File.emotion, File.elicitation) %>%
summarise(accuracy = mean(AED.accuracy,na.rm = TRUE)) %>%
ungroup() %>%
mutate(label = paste0(File.emotion,".",File.elicitation)) %>%
select(-c(File.emotion,File.elicitation)) %>%
spread(label, accuracy)
# Calculating hits, misses, false alarms, and correct rejections
SDT_genuine <- dataset %>%
GenuineDetection()
d_wide <- SDT_genuine %>%
select( Pt.id,  File.emotion, d_prime ) %>%
spread(File.emotion, d_prime)
c_wide <- SDT_genuine %>%
select( Pt.id, File.emotion, c ) %>%
spread(File.emotion, c)
# data for EIJ
autoevaluation <- read_excel("original_data/autovalutazione_clips.xlsx") %>%
select(-Emotion) %>%
'colnames<-'(c( "File.elicitation", "File.name","autoval"))
data <-  dataset %>%
select(Pt.id, File.emotion,  EIJ.intensity, File.name)
EA_dataset <- left_join(autoevaluation,data,by = "File.name") %>%
drop_na()%>%
filter(File.elicitation != "paused") %>%
group_by(Pt.id, File.emotion) %>%
summarise(EA = cor(EIJ.intensity,autoval),
EIJ.intensity = mean(EIJ.intensity, na.rm =TRUE),
autoval= mean(autoval, na.rm =TRUE))
genuine_intensity <- dataset %>%
filter(EIJ.accuracy == 1)%>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(AED.intensity), na.rm = TRUE)) %>%
spread(File.emotion, slider)
emotion_intensity <- dataset %>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(EIJ.intensity, na.rm = TRUE)) %>%
spread(File.emotion, slider)
EA <- EA_dataset %>%
select( Pt.id,  File.emotion, EA ) %>%
spread(File.emotion, EA)
demography <- dataset %>%
filter(File.name == "1_rg_2.mp4") %>%
select(  Pt.id, Pt.gender, Pt.age) %>%
mutate(gender = ifelse(Pt.id== 11,"male",Pt.gender),
eta = ifelse(Pt.id== 11,23,Pt.age))
table_validation <- rbind(
dataset %>%
filter(EIJ.accuracy == 1)%>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(AED.intensity), na.rm = TRUE),
accuracy = mean(abs(AED.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
#Genuine_intensity = paste(mean_silder, "±", sd_slider),
AED = paste(mean_acc, "±", sd_acc)) %>%
select(File.emotion, AED) %>%  # Select only the final formatted columns
pivot_longer(cols = c(AED), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
SDT_genuine %>%
group_by(File.emotion) %>%
summarise(d_mean = round(mean(d_prime),2),
d_sd = round(mean(d_prime),2),
c_mean = round(mean(c),2),
c_sd = round(mean(c),2)) %>%
mutate(Sensitivity_d_prime = paste(d_mean, "±", d_sd),
Bias_c = paste(c_mean, "±", c_sd)) %>%
select(File.emotion, Sensitivity_d_prime, Bias_c) %>%  # Select only the necessary columns
pivot_longer(cols = c(Sensitivity_d_prime, Bias_c), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
dataset %>%
group_by(Pt.id, File.emotion) %>%
summarise(slider = mean(abs(EIJ.intensity), na.rm = TRUE),
accuracy = mean(abs(EIJ.accuracy), na.rm = TRUE))%>%
group_by(File.emotion) %>%
summarise(
mean_silder = round(mean(slider, na.rm = TRUE), 2),
sd_slider = round(sd(slider, na.rm = TRUE), 2),
mean_acc = round(mean(accuracy, na.rm = TRUE), 2),
sd_acc = round(sd(accuracy, na.rm = TRUE), 2)) %>%
mutate(
#Emotion_accuracy = paste(mean_acc, "±", sd_acc),
EIJ = paste(mean_silder, "±", sd_slider)) %>%
select(File.emotion, EIJ) %>%  # Select only the final formatted columns
pivot_longer(cols = c(EIJ), names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value),
EA_dataset %>%
ungroup() %>%
group_by(File.emotion) %>%
summarise(
mean = round(mean(EIJ.intensity, na.rm = TRUE), 2),
sd = round(sd(EIJ.intensity, na.rm = TRUE), 2)) %>%
mutate(
EA = paste(mean, "±", sd)) %>%
select(File.emotion, EA) %>%  # Select only the final formatted columns
pivot_longer(cols = EA, names_to = "Metric", values_to = "Value") %>%
pivot_wider(names_from = File.emotion, values_from = Value)
)
# Save the data in .RData format
save(dataset, emotion_accuracy, genuine_accuracy, SDT_genuine, d_wide,c_wide,
EA_dataset, genuine_intensity, emotion_intensity, EA, demography,table_validation,
file = paste0("data/",datasetname,".RData"))
#################################################
#
# END
#
#################################################
#  Script for Genuine Study - Dataset
#################################################
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        20/05/2024
#  Description: dataset export to xlsx
#
#  Update:      18/09/2024
###########################################################################
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
# Data loading
load("data/validation_dataset.RData")
wb <- createWorkbook()
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "d_prime")
# Write data to the corresponding sheet
writeData(wb, sheet = "d_prime", d_wide)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "criterion")
# Write data to the corresponding sheet
writeData(wb, sheet = "criterion", c_wide)
# addWorksheet(wb, sheetName = "accuracy.emotion")
# # Write data to the corresponding sheet
# writeData(wb, sheet = "accuracy.emotion", emotion_accuracy)
#
# addWorksheet(wb, sheetName = "accuracy.genuine")
# # Write data to the corresponding sheet
# writeData(wb, sheet = "accuracy.genuine", genuine_accuracy)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "EA")
# Write data to the corresponding sheet
writeData(wb, sheet = "EA", EA)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "slider.genuine")
# Write data to the corresponding sheet
writeData(wb, sheet = "slider.genuine", genuine_intensity)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "slider.emotion")
# Write data to the corresponding sheet
writeData(wb, sheet = "slider.emotion", emotion_intensity)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "demography")
# Write data to the corresponding sheet
writeData(wb, sheet = "demography", demography)
# Add a new sheet with the formatted name
addWorksheet(wb, sheetName = "Table.metrics")
# Write data to the corresponding sheet
writeData(wb, sheet = "Table.metrics", table_validation)
# Save the workbook
saveWorkbook(wb, "data/Validation_summary_full_pts.xlsx", overwrite = TRUE)
#################################################
#
# END
#
#################################################
#  Script for Genuine Study - xlsx
#################################################
