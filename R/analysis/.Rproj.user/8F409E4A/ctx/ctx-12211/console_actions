{
    "type": [
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        2
    ],
    "data": [
        "\nR version 4.3.1 (2023-06-16) -- \"Beagle Scouts\"\nCopyright (C) 2023 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin20 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n[Workspace loaded from ~/Library/Mobile Documents/com~apple~CloudDocs/01.WORK/10.Genuine/02.data/genuine/.RData]\n\n",
        "> ",
        "###########################################################################",
        "> ",
        "#",
        "> ",
        "#  Experiment:  GENUINE",
        "> ",
        "#  Programmer:  QUETTIER THOMAS",
        "> ",
        "#  Date:        23/01/2024",
        "> ",
        "#  Description: Pilot accuracy subject table",
        "> ",
        "#",
        "> ",
        "#  Update:      23/01/2024",
        "> ",
        "###########################################################################",
        "> ",
        "",
        "> ",
        "# Clearing workspace",
        "> ",
        "rm(list=ls()) # Clear the existing workspace to avoid conflicts",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Load dependencies",
        "> ",
        "devtools::load_all() # Load necessary functions and packages",
        "\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Loading \u001B[34mgenuine\u001B[38;5;255m\u001B[39m\n",
        "Loading required package: lme4\n",
        "Loading required package: Matrix\n",
        "************\nWelcome to afex. For support visit: http://afex.singmann.science/\n",
        "- Functions for ANOVAs: aov_car(), aov_ez(), and aov_4()\n- Methods for calculating p-values with mixed(): 'S', 'KR', 'LRT', and 'PB'\n- 'afex_aov' and 'mixed' objects can be passed to emmeans() for follow-up tests\n- Get and set global package options with: afex_options()\n- Set sum-to-zero contrasts globally: set_sum_contrasts()\n- For example analyses see: browseVignettes(\"afex\")\n************\n",
        "\nAttaching package: ‘afex’\n\n",
        "The following object is masked from ‘package:lme4’:\n\n    lmer\n\n",
        "Loading required package: coda\n",
        "************\nWelcome to BayesFactor 0.9.12-4.4. If you have questions, please contact Richard Morey (richarddmorey@gmail.com).\n\nType BFManual() to open the manual.\n************\n",
        "Loading required package: Rcpp\n",
        "Loading 'brms' package (version 2.20.4). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n",
        "\nAttaching package: ‘brms’\n\n",
        "The following object is masked from ‘package:lme4’:\n\n    ngrps\n\n",
        "The following object is masked from ‘package:stats’:\n\n    ar\n\n",
        "\nAttaching package: ‘bpnreg’\n\n",
        "The following object is masked from ‘package:coda’:\n\n    traceplot\n\n",
        "Package 'circular', 0.4-95 (2022-04-26). Type 'help(Circular)' for summary information.\n",
        "\nAttaching package: ‘circular’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    sd, var\n\n",
        "\nAttaching package: ‘dplyr’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n",
        "The following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n",
        "Loading required package: carData\n",
        "lattice theme set by effectsTheme()\nSee ?effectsTheme for details.\n",
        "\nAttaching package: ‘ggplot2’\n\n",
        "The following object is masked from ‘package:flexplot’:\n\n    flip_data\n\n",
        "\nAttaching package: ‘ggeffects’\n\n",
        "The following object is masked from ‘package:cowplot’:\n\n    get_title\n\n",
        "Registered S3 methods overwritten by 'ggpp':\n  method                  from   \n  heightDetails.titleGrob ggplot2\n  widthDetails.titleGrob  ggplot2\n",
        "here() starts at /Users/thomasquettier/Library/Mobile Documents/com~apple~CloudDocs/01.WORK/10.Genuine/02.data/genuine\n",
        "Loading required package: ape\n",
        "\nAttaching package: ‘ape’\n\n",
        "The following object is masked from ‘package:flextable’:\n\n    rotate\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    where\n\n",
        "Loading required package: lpSolve\n",
        "\nAttaching package: ‘irr’\n\n",
        "The following object is masked from ‘package:flexplot’:\n\n    icc\n\n",
        "\nAttaching package: ‘janitor’\n\n",
        "The following objects are masked from ‘package:stats’:\n\n    chisq.test, fisher.test\n\n",
        "\nAttaching package: ‘kableExtra’\n\n",
        "The following objects are masked from ‘package:flextable’:\n\n    as_image, footnote\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    group_rows\n\n",
        "Linking to ImageMagick 6.9.12.3\nEnabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fftw, ghostscript, x11\n",
        "Loading required package: car\n",
        "\nAttaching package: ‘car’\n\n",
        "The following object is masked from ‘package:dplyr’:\n\n    recode\n\n",
        "\nAttaching package: ‘purrr’\n\n",
        "The following object is masked from ‘package:car’:\n\n    some\n\n",
        "The following object is masked from ‘package:magrittr’:\n\n    set_names\n\n",
        "The following object is masked from ‘package:flextable’:\n\n    compose\n\n",
        "\nAttaching package: ‘psych’\n\n",
        "The following object is masked from ‘package:car’:\n\n    logit\n\n",
        "The following objects are masked from ‘package:ggplot2’:\n\n    %+%, alpha\n\n",
        "The following object is masked from ‘package:flexplot’:\n\n    rescale\n\n",
        "The following object is masked from ‘package:brms’:\n\n    cs\n\n",
        "#refugeeswelcome\n",
        "\nAttaching package: ‘sjPlot’\n\n",
        "The following objects are masked from ‘package:cowplot’:\n\n    plot_grid, save_plot\n\n",
        "\nAttaching package: ‘tidybayes’\n\n",
        "The following objects are masked from ‘package:brms’:\n\n    dstudent_t, pstudent_t, qstudent_t, rstudent_t\n\n",
        "The following object is masked from ‘package:bayestestR’:\n\n    hdi\n\n",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ──────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.0\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.2     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.4     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.0\n── \u001B[1mConflicts\u001B[22m ────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mpsych\u001B[39m::\u001B[32m%+%()\u001B[39m             masks \u001B[34mggplot2\u001B[39m::%+%()\n\u001B[31m✖\u001B[39m \u001B[34mpsych\u001B[39m::\u001B[32malpha()\u001B[39m           masks \u001B[34mggplot2\u001B[39m::alpha()\n\u001B[31m✖\u001B[39m \u001B[34mpurrr\u001B[39m::\u001B[32mcompose()\u001B[39m         masks \u001B[34mflextable\u001B[39m::compose()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mexpand()\u001B[39m          masks \u001B[34mMatrix\u001B[39m::expand()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mextract()\u001B[39m         masks \u001B[34mmagrittr\u001B[39m::extract()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m          masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mggplot2\u001B[39m::\u001B[32mflip_data()\u001B[39m     masks \u001B[34mflexplot\u001B[39m::flip_data()\n\u001B[31m✖\u001B[39m \u001B[34mkableExtra\u001B[39m::\u001B[32mgroup_rows()\u001B[39m masks \u001B[34mdplyr\u001B[39m::group_rows()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m             masks \u001B[34mstats\u001B[39m::lag()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32mpack()\u001B[39m            masks \u001B[34mMatrix\u001B[39m::pack()\n\u001B[31m✖\u001B[39m \u001B[34mcar\u001B[39m::\u001B[32mrecode()\u001B[39m            masks \u001B[34mdplyr\u001B[39m::recode()\n\u001B[31m✖\u001B[39m \u001B[34mpurrr\u001B[39m::\u001B[32mset_names()\u001B[39m       masks \u001B[34mmagrittr\u001B[39m::set_names()\n\u001B[31m✖\u001B[39m \u001B[34mpurrr\u001B[39m::\u001B[32msome()\u001B[39m            masks \u001B[34mcar\u001B[39m::some()\n\u001B[31m✖\u001B[39m \u001B[34mlubridate\u001B[39m::\u001B[32mstamp()\u001B[39m       masks \u001B[34mcowplot\u001B[39m::stamp()\n\u001B[31m✖\u001B[39m \u001B[34mtidyr\u001B[39m::\u001B[32munpack()\u001B[39m          masks \u001B[34mMatrix\u001B[39m::unpack()\n\u001B[31m✖\u001B[39m \u001B[34mape\u001B[39m::\u001B[32mwhere()\u001B[39m             masks \u001B[34mdplyr\u001B[39m::where()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "Loading required package: viridisLite\n",
        "Loading required package: xts\n",
        "Loading required package: zoo\n",
        "\nAttaching package: ‘zoo’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n",
        "\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n",
        "\nAttaching package: ‘xts’\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    first, last\n\n",
        "\nAttaching package: ‘PerformanceAnalytics’\n\n",
        "The following object is masked from ‘package:graphics’:\n\n    legend\n\n",
        "\nAttaching package: ‘effectsize’\n\n",
        "The following object is masked from ‘package:psych’:\n\n    phi\n\n",
        "\nAttaching package: ‘Hmisc’\n\n",
        "The following object is masked from ‘package:psych’:\n\n    describe\n\n",
        "The following object is masked from ‘package:ape’:\n\n    zoom\n\n",
        "The following objects are masked from ‘package:dplyr’:\n\n    src, summarize\n\n",
        "The following objects are masked from ‘package:base’:\n\n    format.pval, units\n\n",
        "> ",
        "# replace_csv(\"session\",003) pt 5 session 3 was set to 1",
        "> ",
        "",
        "> ",
        "# Data loading",
        "> ",
        "dataset_concatenation(\"dataset\")",
        "> ",
        "load(\"data/dataset.RData\") ",
        "> ",
        "",
        "> ",
        "# Count participants and clips",
        "> ",
        "n <- length(unique(dataset$participant)) # Calculate the number of unique participants",
        "> ",
        "",
        "> ",
        "# Assign participants to groups based on control group membership",
        "> ",
        "control_group <- c(6,7,8,9,10) # Define which participant IDs are in the control group",
        "> ",
        "",
        "> ",
        "# Prepare the dataset for analysis",
        "> ",
        "dataset <- dataset %>%",
        "+ ",
        "  mutate(ccPAS = ifelse(participant %in% control_group,\"STS_IFG\", \"IFG_STS\"),",
        "+ ",
        "         group = ifelse(participant %in% control_group,\"Control\", \"Experimental\")) %>%",
        "+ ",
        "  filter(Trials_loop.thisRepN == 0)",
        "> ",
        "",
        "> ",
        "# Saving on objects in RData format",
        "> ",
        "save(dataset, ",
        "+ ",
        "     file = \"data/dataset.RData\")",
        "> ",
        "# Clearing workspace",
        "> ",
        "rm(list=ls()) # Clear the existing workspace to avoid conflicts",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Load dependencies",
        "> ",
        "devtools::load_all() # Load necessary functions and packages",
        "\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m Loading \u001B[34mgenuine\u001B[38;5;255m\u001B[39m\n",
        "> ",
        "",
        "> ",
        "# replace_csv(\"session\",003) pt 5 session 3 was set to 1",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Data loading",
        "> ",
        "load(\"data/dataset.RData\") ",
        "> ",
        "n <- length(unique(dataset$participant))",
        "> ",
        "n",
        "[1] 12\n",
        "> ",
        "data <- dataset",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "for(i in 1:n){",
        "+ ",
        "pts <- i",
        "+ ",
        "n_clips <- length(unique(dataset$file))-1",
        "+ ",
        "",
        "+ ",
        "dataset <- data %>%",
        "+ ",
        "  filter(participant == pts)",
        "+ ",
        "",
        "+ ",
        "# Data summarization for participants",
        "+ ",
        "summary_participants <- dataset %>%",
        "+ ",
        "  filter(Trials_loop.thisRepN == 0) %>%",
        "+ ",
        "  group_by( participant, emotion, elicitation, session) %>%",
        "+ ",
        "  summarise(",
        "+ ",
        "    genuine.acc.mean = mean(gesino_kb.corr, na.rm = TRUE),",
        "+ ",
        "    genuine.acc.sd = sd(gesino_kb.corr, na.rm = TRUE),",
        "+ ",
        "    genuine.rt.mean = mean(gesino_kb.rt, na.rm = TRUE),",
        "+ ",
        "    genuine.rt.sd = sd(gesino_kb.rt, na.rm = TRUE),",
        "+ ",
        "    genuine.slider1.mean = mean(genuine_slider.response[gesino_kb.corr == 1], na.rm = TRUE),",
        "+ ",
        "    genuine.slider1.sd = sd(genuine_slider.response[gesino_kb.corr == 1], na.rm = TRUE),",
        "+ ",
        "    genuine.slider0.mean = mean(genuine_slider.response[gesino_kb.corr == 0], na.rm = TRUE),",
        "+ ",
        "    genuine.slider0.sd = sd(genuine_slider.response[gesino_kb.corr == 0], na.rm = TRUE),",
        "+ ",
        "    emotion.acc.mean = mean(accuracy, na.rm = TRUE),",
        "+ ",
        "    emotion.acc.sd = sd(accuracy, na.rm = TRUE),",
        "+ ",
        "    emotion.slider1.mean = mean(intensity_slider.response[accuracy == 1], na.rm = TRUE),",
        "+ ",
        "    emotion.slider1.sd = sd(intensity_slider.response[accuracy == 1], na.rm = TRUE),",
        "+ ",
        "    emotion.slider0.mean = mean(intensity_slider.response[accuracy == 0], na.rm = TRUE),",
        "+ ",
        "    emotion.slider0.sd = sd(intensity_slider.response[accuracy == 0], na.rm = TRUE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ungroup()",
        "+ ",
        "",
        "+ ",
        "# Data summarization for emotions",
        "+ ",
        "summary_emotion <- summary_participants %>%",
        "+ ",
        "  mutate(elicitation = \"Total\") %>%",
        "+ ",
        "  group_by( emotion,elicitation, session) %>%",
        "+ ",
        "  summarise(",
        "+ ",
        "    genuine.acc.sd = sd(genuine.acc.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.acc.mean = mean(genuine.acc.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.rt.sd = sd(genuine.rt.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.rt.mean = mean(genuine.rt.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider1.sd = sd(genuine.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider1.mean = mean(genuine.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider0.sd = sd(genuine.slider0.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider0.mean = mean(genuine.slider0.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.acc.sd = sd(emotion.acc.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.acc.mean = mean(emotion.acc.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider1.sd = sd(emotion.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider1.mean = mean(emotion.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider0.sd = sd(emotion.slider0.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider0.mean = mean(emotion.slider0.mean, na.rm = TRUE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ungroup() %>%",
        "+ ",
        "  mutate(across(where(is.numeric), round, digits = 2))",
        "+ ",
        "",
        "+ ",
        "# Data summarization for emotion and elicitation",
        "+ ",
        "summary_tot <- summary_participants %>%",
        "+ ",
        "  group_by( emotion, session, elicitation) %>%",
        "+ ",
        "  summarise(",
        "+ ",
        "    genuine.acc.sd = sd(genuine.acc.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.acc.mean = mean(genuine.acc.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.rt.sd = sd(genuine.rt.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.rt.mean = mean(genuine.rt.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider1.sd = sd(genuine.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider1.mean = mean(genuine.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider0.sd = sd(genuine.slider0.mean, na.rm = TRUE),",
        "+ ",
        "    genuine.slider0.mean = mean(genuine.slider0.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.acc.sd = sd(emotion.acc.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.acc.mean = mean(emotion.acc.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider1.sd = sd(emotion.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider1.mean = mean(emotion.slider1.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider0.sd = sd(emotion.slider0.mean, na.rm = TRUE),",
        "+ ",
        "    emotion.slider0.mean = mean(emotion.slider0.mean, na.rm = TRUE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  ungroup() %>%",
        "+ ",
        "  mutate(across(where(is.numeric), round, digits = 2))",
        "+ ",
        "",
        "+ ",
        "# Combine summaries",
        "+ ",
        "final_dataset <- rbind( summary_tot[c(1,2),], # Combine various summaries into final dataset to have Total",
        "+ ",
        "                        summary_emotion[1,],",
        "+ ",
        "                        summary_tot[c(3,4),],",
        "+ ",
        "                        summary_emotion[2,],",
        "+ ",
        "                        summary_tot[c(5,6),],",
        "+ ",
        "                        summary_emotion[3,],",
        "+ ",
        "                        summary_tot[c(7,8),], # Combine various summaries into final dataset to have Total",
        "+ ",
        "                        summary_emotion[4,],",
        "+ ",
        "                        summary_tot[c(9,10),],",
        "+ ",
        "                        summary_emotion[5,],",
        "+ ",
        "                        summary_tot[c(11,12),],",
        "+ ",
        "                        summary_emotion[6,],",
        "+ ",
        "                        summary_tot[c(13,14),], # Combine various summaries into final dataset to have Total",
        "+ ",
        "                        summary_emotion[7,],",
        "+ ",
        "                        summary_tot[c(15,16),],",
        "+ ",
        "                        summary_emotion[8,],",
        "+ ",
        "                        summary_tot[c(17,18),],",
        "+ ",
        "                        summary_emotion[9,]) %>%",
        "+ ",
        "  mutate(across(where(is.numeric), round, digits = 2)) %>%",
        "+ ",
        "  select(c(\"emotion\", \"session\", \"elicitation\", ",
        "+ ",
        "\"genuine.acc.mean\", \"genuine.acc.sd\", ",
        "+ ",
        "\"genuine.rt.mean\", \"genuine.rt.sd\",    ",
        "+ ",
        "\"genuine.slider1.mean\", \"genuine.slider1.sd\",",
        "+ ",
        "\"genuine.slider0.mean\", \"genuine.slider0.sd\",",
        "+ ",
        "\"emotion.acc.mean\", \"emotion.acc.sd\",",
        "+ ",
        "\"emotion.slider1.mean\", \"emotion.slider1.sd\",",
        "+ ",
        "\"emotion.slider0.mean\", \"emotion.slider0.sd\"))",
        "+ ",
        "",
        "+ ",
        "#save data.frame",
        "+ ",
        "write.xlsx(final_dataset, paste0(\"objects/summary_subjects_\",pts,\".xlsx\"))",
        "+ ",
        "",
        "+ ",
        "table_tot <- final_dataset %>%",
        "+ ",
        "  mutate(genuine.acc = ifelse(is.na(genuine.acc.mean) ,\"\",",
        "+ ",
        "                              ifelse(is.na(genuine.acc.sd)|genuine.acc.sd == 0,paste(genuine.acc.mean),",
        "+ ",
        "                                     paste(genuine.acc.mean, \"±\", genuine.acc.sd))),",
        "+ ",
        "         genuine.rt = ifelse(is.na(genuine.rt.mean) ,\"\",",
        "+ ",
        "                             ifelse(is.na(genuine.rt.sd)|genuine.rt.sd == 0,paste(genuine.rt.mean),",
        "+ ",
        "                                    paste(genuine.rt.mean, \"±\", genuine.rt.sd))),",
        "+ ",
        "         genuine.slider1 = ifelse(is.na(genuine.slider1.mean) ,\"\",",
        "+ ",
        "                                  ifelse(is.na(genuine.slider1.sd)|genuine.slider1.sd == 0,paste(genuine.slider1.mean),",
        "+ ",
        "                                         paste(genuine.slider1.mean, \"±\", genuine.slider1.sd))),",
        "+ ",
        "         genuine.slider0 = ifelse(is.na(genuine.slider0.mean) ,\"\",",
        "+ ",
        "                                  ifelse(is.na(genuine.slider0.sd)|genuine.slider0.sd == 0,paste(genuine.slider0.mean),",
        "+ ",
        "                                         paste(genuine.slider0.mean, \"±\", genuine.slider0.sd))),",
        "+ ",
        "         emotion.acc = ifelse(is.na(emotion.acc.mean) ,\"\",",
        "+ ",
        "                              ifelse(is.na(emotion.acc.sd)|emotion.acc.sd == 0,paste(emotion.acc.mean),",
        "+ ",
        "                                     paste(emotion.acc.mean, \"±\", emotion.acc.sd))),",
        "+ ",
        "         emotion.slider1 = ifelse(is.na(emotion.slider1.mean) ,\"\",",
        "+ ",
        "                                  ifelse(is.na(emotion.slider1.sd)|emotion.slider1.sd == 0,paste(emotion.slider1.mean),",
        "+ ",
        "                                         paste(emotion.slider1.mean, \"±\", emotion.slider1.sd))),",
        "+ ",
        "         emotion.slider0 = ifelse(is.na(emotion.slider0.mean) ,\"\",",
        "+ ",
        "                                  ifelse(is.na(emotion.slider0.sd)|emotion.slider0.sd == 0,paste(emotion.slider0.mean),",
        "+ ",
        "                                         paste(emotion.slider0.mean, \"±\", emotion.slider0.sd)))) %>%",
        "+ ",
        "  select(emotion,session,elicitation,",
        "+ ",
        "         genuine.acc,genuine.rt,genuine.slider1,genuine.slider0,",
        "+ ",
        "         emotion.acc,emotion.slider1,emotion.slider0)",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "# Create and format the flextable",
        "+ ",
        "table <- table_tot%>% ",
        "+ ",
        "  flextable() %>% ",
        "+ ",
        "  autofit() %>% ",
        "+ ",
        "  theme_vanilla() %>% ",
        "+ ",
        "  fontsize(part = \"all\", size = 7)%>% ",
        "+ ",
        "  set_header_labels(values = list(",
        "+ ",
        "    emotion = \"Emotion\",",
        "+ ",
        "    session = \"Session\",",
        "+ ",
        "    elicitation = \"Elicitation\",",
        "+ ",
        "    file = \"Mp4\",",
        "+ ",
        "    genuine.acc = \"Accuracy\",",
        "+ ",
        "    genuine.rt = \" Rt \",",
        "+ ",
        "    emotion.acc = \"Accuracy\",",
        "+ ",
        "    genuine.slider1 = \"Slider correct\",",
        "+ ",
        "    genuine.slider0 = \"Slider incorrect\",",
        "+ ",
        "    emotion.slider1 = \"Slider correct\",",
        "+ ",
        "    emotion.slider0 = \"Slider incorrect\")) %>% ",
        "+ ",
        "  add_header_row(values = c(paste(\"Pts =\",pts),\"\",\"\", \"Genuine\", \"Genuine\",\"Genuine\", \"Genuine\",",
        "+ ",
        "                            \"Emotion\",\"Emotion\",\"Emotion\")) %>%  ",
        "+ ",
        "  merge_v(j = c(1:3)) %>% ",
        "+ ",
        "  merge_h(part = \"header\") %>% ",
        "+ ",
        "  align(align = \"center\", part = \"all\") %>% ",
        "+ ",
        "  width(j = 1:10, width = .8) %>% ",
        "+ ",
        "  bold( part = \"body\", i = c(3, 6, 9,12,15,18,21,24,27), bold = TRUE) %>%",
        "+ ",
        "  set_caption(\"Summary Participant\")",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "# Printing the table for preview",
        "+ ",
        "table",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "# Creating a Word document with the table",
        "+ ",
        "doc <- officer::read_docx()",
        "+ ",
        "doc <- body_add_flextable(doc, value = table)",
        "+ ",
        "#doc <- doc %>% officer::body_end_section_landscape()",
        "+ ",
        "# doc <- body_add_par(doc, value = \"\", style = \"Normal\") %>% ",
        "+ ",
        "#   slip_in_section(landscape = TRUE, page_size = officer::page_size(orient = \"landscape\"))",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "print(doc, target = paste0(\"objects/summary_subjects_\",pts,\".docx\"))",
        "+ ",
        "}",
        "\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n",
        "\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'participant', 'emotion',\n'elicitation'. You can override using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'elicitation'. You can\noverride using the `.groups` argument.\u001B[39m\n\u001B[38;5;255m`summarise()` has grouped output by 'emotion', 'session'. You can override\nusing the `.groups` argument.\u001B[39m\n",
        "Warning message:\n",
        "\u001B[38;5;255mThere was 1 warning in `mutate()`.\u001B[39m\n\u001B[38;5;255m\u001B[36mℹ\u001B[38;5;255m In argument: `across(where(is.numeric), round, digits = 2)`.\u001B[39m\nCaused by warning:\n\u001B[38;5;255m\u001B[33m!\u001B[38;5;255m The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\u001B[90mThis warning is displayed once every 8 hours.\u001B[38;5;255m\n\u001B[90mCall `lifecycle::last_lifecycle_warnings()` to see where this warning was\u001B[38;5;255m\n\u001B[90mgenerated.\u001B[38;5;255m\u001B[39m \n",
        "> ",
        "read_acq <- function(acq_files, hdf5_output_dir=NULL, keep_hdf5=TRUE, acq2hdf5_location=NULL, ...) {",
        "+ ",
        "    sapply(acq_files, assert_file_exists)",
        "+ ",
        "    if (!keep_hdf5) {",
        "+ ",
        "        hdf5_output_dir <- tempdir()  #output txts to temporary directory",
        "+ ",
        "    } else {",
        "+ ",
        "        if (!is.null(hdf5_output_dir) && !dir.exists(hdf5_output_dir)) { dir.create(hdf5_output_dir) } #create output directory for TXT files if requested",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    hdf5_files <- acq2hdf5(acq_files, acq2hdf5_location=acq2hdf5_location)",
        "+ ",
        "    ",
        "+ ",
        "    #pass additional arguments such as parse_all to read.asc",
        "+ ",
        "    res <- lapply(1:length(hdf5_files), function(ff) {",
        "+ ",
        "        physio_data <- list(raw=biopac_hdf5_to_dataframe(hdf5file=hdf5_files[ff], ...), hdf5_file=hdf5_files[ff], acq_file=acq_files[ff])",
        "+ ",
        "        physio_data$sampling_rate <- attr(physio_data$raw, \"sampling_rate\") #promote to metadata",
        "+ ",
        "        physio_data$max_channel_rate <- attr(physio_data$raw, \"max_channel_rate\") #promote to metadata",
        "+ ",
        "        class(physio_data) <- c(\"list\", \"ep.physio\") #add ep.physio class",
        "+ ",
        "        return(physio_data)",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    if (!keep_hdf5) { file.remove(hdf5_files) } #cleanup hdf5 files if requested",
        "+ ",
        "    ",
        "+ ",
        "    names(res) <- basename(acq_files)",
        "+ ",
        "    return(res)",
        "+ ",
        "    ",
        "+ ",
        "}",
        "> ",
        "read_acq(\"~/Exp SST_ccPAS/Output MEP/ANALIZZATI/SMA/07FM_ccPAS.acq\")",
        "Error in read_acq(\"~/Exp SST_ccPAS/Output MEP/ANALIZZATI/SMA/07FM_ccPAS.acq\") : \n  object 'assert_file_exists' not found\n",
        "> ",
        "read_acq(\"data/SMA/07FM_ccPAS.acq\")",
        "Error in read_acq(\"data/SMA/07FM_ccPAS.acq\") : \n  object 'assert_file_exists' not found\n",
        "> ",
        "read_acq(\"data/07FM_ccPAS.acq\")",
        "Error in read_acq(\"data/07FM_ccPAS.acq\") : \n  object 'assert_file_exists' not found\n",
        "> ",
        "x<-read_acq(\"data/07FM_ccPAS.acq\")",
        "Error in read_acq(\"data/07FM_ccPAS.acq\") : \n  object 'assert_file_exists' not found\n",
        "> ",
        "read_acq <- function(acq_files, hdf5_output_dir=NULL, keep_hdf5=TRUE, acq2hdf5_location=NULL, ...) {",
        "+ ",
        "",
        "+ ",
        "    if (!keep_hdf5) {",
        "+ ",
        "    hdf5_output_dir <- tempdir()  #output txts to temporary directory",
        "+ ",
        "  } else {",
        "+ ",
        "    if (!is.null(hdf5_output_dir) && !dir.exists(hdf5_output_dir)) { dir.create(hdf5_output_dir) } #create output directory for TXT files if requested",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  hdf5_files <- acq2hdf5(acq_files, acq2hdf5_location=acq2hdf5_location)",
        "+ ",
        "  ",
        "+ ",
        "  #pass additional arguments such as parse_all to read.asc",
        "+ ",
        "  res <- lapply(1:length(hdf5_files), function(ff) {",
        "+ ",
        "    physio_data <- list(raw=biopac_hdf5_to_dataframe(hdf5file=hdf5_files[ff], ...), hdf5_file=hdf5_files[ff], acq_file=acq_files[ff])",
        "+ ",
        "    physio_data$sampling_rate <- attr(physio_data$raw, \"sampling_rate\") #promote to metadata",
        "+ ",
        "    physio_data$max_channel_rate <- attr(physio_data$raw, \"max_channel_rate\") #promote to metadata",
        "+ ",
        "    class(physio_data) <- c(\"list\", \"ep.physio\") #add ep.physio class",
        "+ ",
        "    return(physio_data)",
        "+ ",
        "  })",
        "+ ",
        "  ",
        "+ ",
        "  if (!keep_hdf5) { file.remove(hdf5_files) } #cleanup hdf5 files if requested",
        "+ ",
        "  ",
        "+ ",
        "  names(res) <- basename(acq_files)",
        "+ ",
        "  return(res)",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "x<-read_acq(\"data/07FM_ccPAS.acq\")",
        "Error in acq2hdf5(acq_files, acq2hdf5_location = acq2hdf5_location) : \n  could not find function \"acq2hdf5\"\n",
        "> ",
        "install.packages(\"remotes\")",
        "Error in install.packages : Updating loaded packages\n",
        "> ",
        "remotes::install_github(\"PennStateDEPENdLab/experiment_pipeline\")",
        "Downloading GitHub repo PennStateDEPENdLab/experiment_pipeline@HEAD\n",
        "\nRestarting R session...\n\n"
    ]
}