theme_minimal()
#################################################
#
# END
#
#################################################
#  Script for GENUINE Study - Pilot accuracy subject table
#################################################
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
dataset <- read_excel("data/accuracy_genuine_lf.xlsx", sheet = "Sheet 1") %>%
filter(session != 2,
subject != 8, subject != 11, subject != 19,
subject != 30, subject != 31, subject != 32,
subject != 33, subject != 34, subject != 35)
# Compute inverse efficiency score and update group labels
dataset <- dataset %>%
mutate(ies = genuine.rt / genuine.accuracy,  # Compute inverse efficiency score
group = ifelse(group == "Experimental", group, "ctrl"))  # Mutate group to be "Experimental" or "ctrl"
# Check if filters are correctly applied
unique(dataset$group)  # Check unique group values
unique(dataset$subject)  # Check unique subject values
unique(dataset$session)  # Check unique session values
data$scorep <- data$ies  # Assign genuine accuracy to scorep
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        05/03/2024
#  Description: GLM ACCURACY GENUINE
#
#  Update:      05/03/2024
###########################################################################
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
dataset <- read_excel("data/accuracy_genuine_lf.xlsx", sheet = "Sheet 1") %>%
filter(session != 2,
subject != 8, subject != 11, subject != 19,
subject != 30, subject != 31, subject != 32,
subject != 33, subject != 34, subject != 35)
# Compute inverse efficiency score and update group labels
dataset <- dataset %>%
mutate(ies = genuine.rt / genuine.accuracy,  # Compute inverse efficiency score
group = ifelse(group == "Experimental", group, "ctrl"))  # Mutate group to be "Experimental" or "ctrl"
# Check if filters are correctly applied
unique(dataset$group)  # Check unique group values
unique(dataset$subject)  # Check unique subject values
unique(dataset$session)  # Check unique session values
# model selection
data <- dataset # Avoid overwriting existing object
# Data preparation for GLM (Generalized Linear Model)
# Add a column for the number of trials
data$nt <- 48  # Number of trials
# Create an easy-to-use code for genuine accuracy
data$scorep <- dataset$genuine.accuracy  # Assign genuine accuracy to scorep
data$scorep <- dataset$ies
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        05/03/2024
#  Description: GLM ACCURACY GENUINE
#
#  Update:      05/03/2024
###########################################################################
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
dataset <- read_excel("data/accuracy_genuine_lf.xlsx", sheet = "Sheet 1") %>%
filter(session != 2,
subject != 8, subject != 11, subject != 19,
subject != 30, subject != 31, subject != 32,
subject != 33, subject != 34, subject != 35)
# Compute inverse efficiency score and update group labels
dataset <- dataset %>%
mutate(ies = genuine.rt / genuine.accuracy,  # Compute inverse efficiency score
group = ifelse(group == "Experimental", group, "ctrl"))  # Mutate group to be "Experimental" or "ctrl"
# Check if filters are correctly applied
unique(dataset$group)  # Check unique group values
unique(dataset$subject)  # Check unique subject values
unique(dataset$session)  # Check unique session values
# model selection
data <- dataset # Avoid overwriting existing object
# Data preparation for GLM (Generalized Linear Model)
# Add a column for the number of trials
data$nt <- 48  # Number of trials
# Create an easy-to-use code for genuine ies
data$scorep <- dataset$ies  # Assign ies to scorep
contrasts(data$group) <- contr.sum(length(unique(data$group)))  # Sum coding for group
data
data <- data %>%
mutate(scorep = as.numeric(scorep),  # Convert scorep to numeric
group = as.factor(group),  # Convert group to factor
session = as.factor(session),  # Convert session to factor
emotion = as.factor(emotion))  # Convert emotion to factor
# Set contrasts for factors to use sum coding
contrasts(data$group) <- contr.sum(length(unique(data$group)))  # Sum coding for group
contrasts(data$emotion) <- contr.sum(length(unique(data$emotion)))  # Sum coding for emotion
contrasts(data$session) <- contr.sum(length(unique(data$session)))  # Sum coding for session
fit0 <- lmer(scorep ~ 1 + (1|subject),           # Fixed and random effects
data = data)
# Model with group as a fixed effect
fit1 <- glmer(scorep ~ group + (1|subject),
data = data)
# Null model with only the intercept and random effect of subject
fit0 <- lmer(scorep ~ 1 + (1|subject),           # Fixed and random effects
data = data)                       # Weights to account for number of trials
# Model with group as a fixed effect
fit1 <- glmer(scorep ~ group + (1|subject),
data = data)
# Model with session as a fixed effect
fit2 <- glmer(scorep ~ session + (1|subject),
data = data)
# Model with emotion as a fixed effect
fit3 <- glmer(scorep ~ emotion + (1|subject),
data = data)
# Model with interaction between group and session
fit4 <- glmer(scorep ~ group * session + (1|subject),
data = data)
# Model with interaction between group and emotion
fit5 <- glmer(scorep ~ group * emotion + (1|subject),
data = data)
# Model with interaction between session, group, and emotion
fit6 <- glmer(scorep ~ session * group * emotion + (1|subject),
data = data)
# Compare the models using ANOVA
anova(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
# Check Variance Inflation Factor (VIF) for multicollinearity
vif(fit6)
AIC(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
BIC(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
par(mfrow = c(2, 2))
plot(fit6)
# Assign the best model (fit6) to the variable fit for further analysis
fit <- fit6
# Plot the effects of all predictors in the model
# This helps visualize the estimated effects of predictors and their interactions
plot(allEffects(fit))
# Perform Type III Analysis of Variance (ANOVA) on the fitted model
# Type III ANOVA is used to assess the significance of each predictor after accounting for all other predictors
car::Anova(fit, type = "III")
main_emotion <- emmeans(fit, pairwise ~ emotion, adjust = "bonf")
main_session <- emmeans(fit, pairwise ~ session, adjust = "bonf")
main_session
# Model with interaction between session, group, and emotion
fit6 <- glmer(scorep ~  group * emotion * session + (1|subject),
data = data)
# Assign the best model (fit6) to the variable fit for further analysis
fit <- fit6
# Plot the effects of all predictors in the model
# This helps visualize the estimated effects of predictors and their interactions
plot(allEffects(fit))
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
dataset <- read_excel("data/accuracy_genuine_lf.xlsx", sheet = "Sheet 1") %>%
filter(session != 2,
subject != 8, subject != 11, subject != 19,
subject != 30, subject != 31, subject != 32,
subject != 33, subject != 34, subject != 35)
# Data loading and eliminate outliers and 5 of the 6 M1 group
# Data loading
load("data/dataset.RData")
data <- dataset %>%
filter(session != 2,
subject != 8, subject != 11, subject != 19,
subject != 30, subject != 31, subject != 32,
subject != 33, subject != 34, subject != 35) %>%
select(id, paricipant, gender, education)
data <- dataset %>%
filter(session != 2,
paricipant != 8, paricipant != 11, paricipant != 19,
paricipant != 30, paricipant != 31, paricipant != 32,
paricipant != 33, paricipant != 34, paricipant != 35) %>%
select(id, paricipant, gender, education)
data <- dataset %>%
filter(session != 2,
participant != 8, participant != 11, participant != 19,
participant != 30, participant != 31, participant != 32,
participant != 33, participant != 34, participant != 35) %>%
select(id, paricipant, gender, education)
data <- dataset %>%
filter(session != 2,
participant != 8, participant != 11, participant != 19,
participant != 30, participant != 31, participant != 32,
participant != 33, participant != 34, participant != 35) %>%
select(id, participant, gender, education)
unique(data$gender)
View(data)
View(dataset)
data <- dataset %>%
filter(session != 2,
id == 1,
participant != 8, participant != 11, participant != 19,
participant != 30, participant != 31, participant != 32,
participant != 33, participant != 34, participant != 35) %>%
select( participant, gender, education) %>%
mutate(gender = ifelse(gender == "m", "male", "female")) # Recode gender for clarity
data
unique(data$gender)
data <- dataset %>%
filter(session != 2,
id == 1,
participant != 8, participant != 11, participant != 19,
participant != 30, participant != 31, participant != 32,
participant != 33, participant != 34, participant != 35) %>%
select( participant, gender, education)
unique(data$gender)
View(data)
data <- dataset %>%
filter(session != 2,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30, participant != 31, participant != 32,
participant != 33, participant != 34, participant != 35) %>%
select( participant, gender, education)
unique(data$gender)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30, participant != 31, participant != 32,
participant != 33, participant != 34, participant != 35) %>%
select( participant, gender, education)
unique(data$group)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1")
unique(data$group)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
)
unique(data$group)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1")
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education)
data
dataset %>%
filter(session == 2,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education)
dataset %>%
filter(session == 3,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education)
data
replace_csv(gender, "f")
replace_csv(gender, "f")
replace_csv(gender, "f")
replace_csv(gender , "f")
replace_csv("gender" , "f")
replace_csv("gender" , "f")
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
# Description: This script aggregates all .csv files generated by PsychoPy
#              and compiles them into a single .RData file for streamlined analysis.
#
#  Update:      16/05/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("participant",37) # function to correct error in coding metadata from psychopy
# Data loading
dataset_concatenation("original_data","dataset") # aggregates all .csv files
load("data/dataset.RData")
# Count participants
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
# Assign participants to groups based on the chronological order of data collection
treatment_group <- c(1,2,3,4,5,11,12,13,14,17,19,22,25,26,27,37)
control_group <- c(6,7,8,9,10,15,16,18,20,21,23,24,28,29,30)
m1_group <- c(31,32,33,34,35,36)
# Retain only experimental trials and create columns for the ccPAS protocol and group assignment
dataset <- dataset %>%
mutate(ccPAS = ifelse(participant %in% control_group,"STS_IFG",
ifelse(participant %in% m1_group,"M1_IFG", "IFG_STS")),
group = ifelse(participant %in% control_group,"Control",
ifelse(participant %in% m1_group,"M1","Experimental"))) %>%
filter(Trials_loop.thisRepN == 0)
# Save the data in .RData format
save(dataset,
file = "data/dataset.RData")
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
# Description: Preprocess and filter data, then generate .csv and .xlsx files
#
#  Update:      16/05/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
#replace_csv("session",002)
# Data loading
load("data/dataset.RData")
# Count participants
n <- length(unique(dataset$participant)) # Calculate the number of unique participants
data <- dataset # Avoid overwriting existing object
for(i in 1:n){
pts <- sprintf("%02d", i)
n_clips <- length(unique(dataset$file))-1
dataset <- data %>%
filter(participant == i)
group <- unique(dataset$group)
# Data summarization for participants
summary_participants <- dataset %>%
filter(Trials_loop.thisRepN == 0) %>%
group_by( participant, emotion, elicitation, session) %>%
summarize_data()
# Data summarization for emotions
summary_emotion <- summary_participants %>%
mutate(elicitation = "Total") %>%
group_by( emotion,elicitation, session) %>%
summarize_summary()
# Data summarization for emotion and elicitation
summary_tot <- summary_participants %>%
group_by( emotion, session, elicitation) %>%
summarize_summary()
# Summarize data by emotion, session, and elicitation
summary_tot <- summary_participants %>%
select( -participant)
# Combine emotion and total summaries and arrange them
final_dataset <- bind_rows(summary_emotion, summary_tot) %>%
mutate(elicitation = factor(elicitation, levels = c("genuine", "paused", "Total"))) %>%
arrange(emotion, session, elicitation)
# prepare data for long format file
long_format <-summary_emotion %>%
mutate(genuine.accuracy = genuine.acc.mean,
genuine.rt = genuine.rt1.mean,
genuine.slider.correct = genuine.slider1.mean,
genuine.slider.incorrect = genuine.slider0.mean,
emotion.accuracy = emotion.acc.mean,
emotion.slider.correct = emotion.slider1.mean,
emotion.slider.incorrect = emotion.slider0.mean,
subject = i) %>%
select(subject,session, emotion,
genuine.accuracy,genuine.rt)
long_format$group <- group
# pts <- pts + 100  # Ensure the order is sequential from 1, 2, 3,..., 37 instead of 1, 10, 11,..., 37
# Save data frames
write.xlsx(final_dataset, paste0("data/Pt_",pts,"_",group,".xlsx"))
write.csv(long_format, paste0("data/Pt_", pts, "_", group, ".csv"))
}
# Concatenate new lf.csv files
dataset_long <- list.files(path="data",pattern="\\.csv$", full.names = TRUE) %>%
lapply(.,function(x) read.csv(x, sep=",", header=TRUE,stringsAsFactors = FALSE ))%>%
bind_rows(.id = "subject") %>%
select(-X)
# Save the concatenated data frame
write.xlsx(dataset_long, paste0("data/Accuracy_genuine_lf.xlsx"))
#################################################
#
# END
#
#################################################
#  Script for GENUINE Study - Preprocessing
#################################################
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        20/05/2024
#  Description: demography
#
#  Update:      20/05/2024
###########################################################################
# Clearing workspace
rm(list = ls())  # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all()  # Load necessary functions and packages
# Data loading and eliminate outliers and 5 of the 6 M1 group
# Data loading
load("data/dataset.RData")
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education)
unique(data$gender)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, education) %>%
mutate(gender = ifelse(gender == "m", "male", "female")) # Recode gender for clarity
View(data)
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( participant, gender, eta) %>%
mutate(gender = ifelse(gender == "m", "male", "female")) # Recode gender for clarity
group_stats <- data %>%
group_by(group) %>%
summarise(
age_mean = mean(eta, na.rm = TRUE), # Mean age per group
age_sd = sd(eta, na.rm = TRUE), # Standard deviation of age per group
count = n(), # Total count of subjects per group
female = sum(gender == "female"), # Count of female subjects per group
male = sum(gender == "male") # Count of male subjects per group
) %>%
ungroup()
data <- dataset %>%
filter(session == 1,
file == "1_rg_2.mp4",
participant != 8, participant != 11, participant != 19,
participant != 30,
group != "M1") %>%
select( group, participant, gender, eta) %>%
mutate(gender = ifelse(gender == "m", "male", "female"))
# Group-wise Calculations
#   - Objective: Calculate mean age, standard deviation, and count by gender for each group
group_stats <- data %>%
group_by(group) %>%
summarise(
age_mean = mean(eta, na.rm = TRUE), # Mean age per group
age_sd = sd(eta, na.rm = TRUE), # Standard deviation of age per group
count = n(), # Total count of subjects per group
female = sum(gender == "female"), # Count of female subjects per group
male = sum(gender == "male") # Count of male subjects per group
) %>%
ungroup()
group_stats
total_stats <- data %>%
summarise(
group = "total",
age_mean = mean(age, na.rm = TRUE), # Overall mean age
age_sd = sd(age, na.rm = TRUE), # Overall standard deviation of age
count = n(), # Total count of subjects
female = sum(gender == "female"), # Total count of female subjects
male = sum(gender == "male") # Total count of male subjects
)
total_stats <- data %>%
summarise(
group = "total",
age_mean = mean(eta, na.rm = TRUE), # Overall mean age
age_sd = sd(eta, na.rm = TRUE), # Overall standard deviation of age
count = n(), # Total count of subjects
female = sum(gender == "female"), # Total count of female subjects
male = sum(gender == "male") # Total count of male subjects
)
descriptive_table <- rbind(group_stats, total_stats) # Combine group and total stats into one table
descriptive_table
write.xlsx(descriptive_table, "data/Table1.xlsx", rowNames = FALSE) # Save the table as an Excel file
# 1. ANOVA on demography
test<-t.test(eta ~ group, data = data)
test<-t.test(eta ~ group, data = data)
t_to_d(test$statistic,test$parameter, paired = FALSE, ci = 0.95, alternative = "two.sided")
test
t_to_d(test$statistic,test$parameter, paired = FALSE, ci = 0.95, alternative = "two.sided")
gender_table <- table(data$group, data$gender)
chisq.test(gender_table)
descriptive_table
