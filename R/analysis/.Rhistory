# Model with interaction between session, group, and emotion
fit <- glm(scorep ~ session * group * emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
# Check Variance Inflation Factor (VIF) for multicollinearity
vif(fit)
# The VIF values for the model are all very close to 1,
# which indicates that there is no significant multicollinearity among the predictors.
# Check residual diagnostics
par(mfrow = c(2, 2))
plot(fit)
# Plot the effects of all predictors in the model
# This helps visualize the estimated effects of predictors and their interactions
plot(allEffects(fit))
# Perform Type III Analysis of Variance (ANOVA) on the fitted model
# Type III ANOVA is used to assess the significance of each predictor after accounting for all other predictors
car::Anova(fit, type = "III")
# Calculate estimated marginal means (EMMs) and perform pairwise comparisons for the main effect of emotion
# 'adjust = "bonf"' applies Bonferroni correction for multiple comparisons
main_emotion <- emmeans(fit, pairwise ~ emotion, adjust = "bonf")
# Model with interaction between session, group, and emotion
fit0 <- glm(scorep ~ 1,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy analysis emotion
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
dataset %>%
group_by(group, emotion) %>%
summarise(mean = mean(arousal)) %>%
spread( emotion, mean)
dataset %>%
group_by(group, emotion) %>%
summarise(sd = sd(arousal)) %>%
spread( emotion, sd)
# Check if filters are correctly applied
unique(dataset$group)  # Check unique group values
unique(dataset$subject)  # Check unique subject values
unique(dataset$session)  # Check unique session values
# model selection
data <- dataset # Avoid overwriting existing object
# Data preparation for GLM (Generalized Linear Model)
# Add a column for the number of trials
data$nt <- 48  # Number of trials
# Create an easy-to-use code for genuine accuracy
data$scorep <- dataset$arousal  # Assign genuine accuracy to scorep
# Convert variables to appropriate data types and set factors
data <- data %>%
mutate(scorep = as.numeric(scorep),  # Convert scorep to numeric
group = as.factor(group),  # Convert group to factor
session = as.factor(session),  # Convert session to factor
emotion = as.factor(emotion))  # Convert emotion to factor
# Set contrasts for factors to use sum coding
contrasts(data$group) <- contr.sum(length(unique(data$group)))  # Sum coding for group
contrasts(data$emotion) <- contr.sum(length(unique(data$emotion)))  # Sum coding for emotion
contrasts(data$session) <- contr.sum(length(unique(data$session)))  # Sum coding for session
# # Define a custom contrast matrix for 3 levels
# custom_contrasts <- matrix(c(
#   2, -1, -1,  # Contrast 1: Pre-treatment vs. average of both post-treatments
#   -1,  1,  0,  # Contrast 2: Post-treatment1 vs. Pre-treatment
#   -1,  0,  1   # Contrast 3: Post-treatment2 vs. Pre-treatment
# ), byrow = TRUE, nrow = 3)
# # Name the rows and columns for clarity
# rownames(custom_contrasts) <- c("Pre vs Post Avg", "Post1 vs Pre", "Post2 vs Pre")
# colnames(custom_contrasts) <- levels(data$session)
# # Assign the custom contrasts to the factor
# contrasts(data$session) <- custom_contrasts
# Model with interaction between session, group, and emotion
fit0 <- glm(scorep ~ 1,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
fit1 <- glm(scorep ~ session,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
fit2 <- glm(scorep ~ group,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
fit3 <- glm(scorep ~ emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
fit4 <- glm(scorep ~ group * emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
fit5 <- glm(scorep ~ group * session,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
fit6 <- glm(scorep ~ session * group * emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"),  # Gaussian family with identity link function
weights = nt)
# Compare the models using ANOVA
anova(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
# Model with interaction between session, group, and emotion
fit0 <- glm(scorep ~ 1,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy analysis emotion
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
dataset %>%
group_by(group, emotion) %>%
summarise(mean = mean(arousal)) %>%
spread( emotion, mean)
dataset %>%
group_by(group, emotion) %>%
summarise(sd = sd(arousal)) %>%
spread( emotion, sd)
# Check if filters are correctly applied
unique(dataset$group)  # Check unique group values
unique(dataset$subject)  # Check unique subject values
unique(dataset$session)  # Check unique session values
# model selection
data <- dataset # Avoid overwriting existing object
# Data preparation for GLM (Generalized Linear Model)
# Add a column for the number of trials
data$nt <- 48  # Number of trials
# Create an easy-to-use code for genuine accuracy
data$scorep <- dataset$arousal  # Assign genuine accuracy to scorep
# Convert variables to appropriate data types and set factors
data <- data %>%
mutate(scorep = as.numeric(scorep),  # Convert scorep to numeric
group = as.factor(group),  # Convert group to factor
session = as.factor(session),  # Convert session to factor
emotion = as.factor(emotion))  # Convert emotion to factor
# Set contrasts for factors to use sum coding
contrasts(data$group) <- contr.sum(length(unique(data$group)))  # Sum coding for group
contrasts(data$emotion) <- contr.sum(length(unique(data$emotion)))  # Sum coding for emotion
contrasts(data$session) <- contr.sum(length(unique(data$session)))  # Sum coding for session
# # Define a custom contrast matrix for 3 levels
# custom_contrasts <- matrix(c(
#   2, -1, -1,  # Contrast 1: Pre-treatment vs. average of both post-treatments
#   -1,  1,  0,  # Contrast 2: Post-treatment1 vs. Pre-treatment
#   -1,  0,  1   # Contrast 3: Post-treatment2 vs. Pre-treatment
# ), byrow = TRUE, nrow = 3)
# # Name the rows and columns for clarity
# rownames(custom_contrasts) <- c("Pre vs Post Avg", "Post1 vs Pre", "Post2 vs Pre")
# colnames(custom_contrasts) <- levels(data$session)
# # Assign the custom contrasts to the factor
# contrasts(data$session) <- custom_contrasts
# Model with interaction between session, group, and emotion
fit0 <- glm(scorep ~ 1,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
fit1 <- glm(scorep ~ session,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
fit2 <- glm(scorep ~ group,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
fit3 <- glm(scorep ~ emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
fit4 <- glm(scorep ~ group * emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
fit5 <- glm(scorep ~ group * session,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
fit6 <- glm(scorep ~ session * group * emotion,
data = data,                      # Data frame containing variables
family = gaussian(link = "identity"))
# Compare the models using ANOVA
anova(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
fit0 <- glm(scorep ~ 1, data = data, family = gaussian(link = "identity"))
fit1 <- glm(scorep ~ session, data = data, family = gaussian(link = "identity"))
fit2 <- glm(scorep ~ group, data = data, family = gaussian(link = "identity"))
fit3 <- glm(scorep ~ emotion, data = data, family = gaussian(link = "identity"))
fit4 <- glm(scorep ~ group * emotion, data = data, family = gaussian(link = "identity"))
fit5 <- glm(scorep ~ group * session, data = data, family = gaussian(link = "identity"))
fit6 <- glm(scorep ~ session * group * emotion, data = data, family = gaussian(link = "identity"))
# Compare models using AIC and BIC
aic_values <- AIC(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
bic_values <- BIC(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
print(aic_values)
print(bic_values)
# Compare models using likelihood ratio tests
anova(fit0, fit1, test="Chisq")
anova(fit1, fit2, test="Chisq")
anova(fit2, fit3, test="Chisq")
anova(fit3, fit4, test="Chisq")
anova(fit4, fit5, test="Chisq")
anova(fit5, fit6, test="Chisq")
# Summarize each model
summary(fit0)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
summary(fit6)
print(aic_values)
print(bic_values)
# Perform Type III Analysis of Variance (ANOVA) on the fitted model
# Type III ANOVA is used to assess the significance of each predictor after accounting for all other predictors
car::Anova(fit6, type = "III")
main_emotion <- emmeans(fit6, pairwise ~ emotion, adjust = "bonf")
main_emotion
car::Anova(fit6, type = "III")
library(MASS)
# Example data: Assume you have a data frame 'data' with variables 'intensity' (Likert scale), 'session', 'group', and 'emotion'.
# Ensure 'intensity' is an ordered factor
data$intensity <- factor(data$intensity, levels = 0:9, ordered = TRUE)
library(MASS)
# Example data: Assume you have a data frame 'data' with variables 'intensity' (Likert scale), 'session', 'group', and 'emotion'.
# Ensure 'intensity' is an ordered factor
data$intensity <- factor(data$arousal, levels = 0:9, ordered = TRUE)
fit <- polr(intensity ~ session * group * emotion, data = data, Hess = TRUE)
Anova(fit, type = "III")
fit
fit
fit <- polr(intensity ~ emotion, data = data, Hess = TRUE)
Anova(fit, type = "III")
fit0 <- polr(intensity ~ 1, data = data, Hess = TRUE)
fit1 <- polr(intensity ~ session, data = data, Hess = TRUE)
fit2 <- polr(intensity ~ group, data = data, Hess = TRUE)
fit3 <- polr(intensity ~ emotion, data = data, Hess = TRUE)
fit4 <- polr(intensity ~ group * session , data = data, Hess = TRUE)
fit5 <- polr(intensity ~ group * emotion, data = data, Hess = TRUE)
fit6 <- polr(intensity ~ session * group * emotion, data = data, Hess = TRUE)
anova(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
AIC(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
BIC(fit0, fit1, fit2, fit3, fit4, fit5, fit6)
install.packages("lmtest")
library(MASS)
library(car)
library(lmtest)
# Prepare your data
data$intensity <- factor(data$arousal, levels = 0:9, ordered = TRUE)
# Fit multiple ordinal logistic regression models
fit0 <- polr(intensity ~ 1, data = data, Hess = TRUE)
fit1 <- polr(intensity ~ group, data = data, Hess = TRUE)
fit2 <- polr(intensity ~ session, data = data, Hess = TRUE)
fit3 <- polr(intensity ~ emotion, data = data, Hess = TRUE)
fit4 <- polr(intensity ~ group * session, data = data, Hess = TRUE)
fit5 <- polr(intensity ~ group * emotion, data = data, Hess = TRUE)
fit6 <- polr(intensity ~ session * group * emotion, data = data, Hess = TRUE)
# Compa
aic_values <- data.frame(
Model = c("fit0", "fit1", "fit2", "fit3", "fit4", "fit5", "fit6"),
AIC = c(AIC(fit0), AIC(fit1), AIC(fit2), AIC(fit3), AIC(fit4), AIC(fit5), AIC(fit6)),
BIC = c(BIC(fit0), BIC(fit1), BIC(fit2), BIC(fit3), BIC(fit4), BIC(fit5), BIC(fit6))
)
print(aic_values)
# Perform likelihood ratio tests for nested models
anova(fit5, fit6, test="Chisq")
anova(fit4, fit6, test="Chisq")
anova(fit3, fit6, test="Chisq")
# Type III ANOVA is used to assess the significance of each predictor after accounting for all other predictors
car::Anova(fit6, type = "III")
fit6 <- polr(intensity ~ session + group + emotion + session:group + session:emotion + group:emotion, data = data, Hess = TRUE)
aic_values <- data.frame(
Model = c("fit0", "fit1", "fit2", "fit3", "fit4", "fit5", "fit6"),
AIC = c(AIC(fit0), AIC(fit1), AIC(fit2), AIC(fit3), AIC(fit4), AIC(fit5), AIC(fit6)),
BIC = c(BIC(fit0), BIC(fit1), BIC(fit2), BIC(fit3), BIC(fit4), BIC(fit5), BIC(fit6))
)
print(aic_values)
anova(fit5, fit6, test="Chisq")
anova(fit4, fit6, test="Chisq")
anova(fit3, fit6, test="Chisq")
# Type III ANOVA is used to assess the significance of each predictor after accounting for all other predictors
car::Anova(fit6, type = "III")
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy analysis emotion
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy analysis emotion
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        23/01/2024
#  Description: Pilot accuracy analysis emotion
#
#  Update:      23/01/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")
# Data loading
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
arousal = emotion.slider.correct) %>%
select(subject, emotion, group,session, arousal)
dataset <- read_excel("data/dati_summary_lf.xlsx", sheet = "Sheet 1")  %>%
filter(
subject != 8, subject != 11, subject != 19,
subject != 30) %>%
mutate(subject = as.factor(subject),
emotion = as.factor(emotion),
group = as.factor(group),
correct = emotion.accuracy) %>%
select(subject, emotion, group,session, correct)
install.packages("ordinal")
library(ordinal)
# Example data
data <- data.frame(
response = factor(c("low", "medium", "high", "medium", "low"), ordered = TRUE),
predictor1 = c(1, 2, 3, 4, 5),
predictor2 = c("A", "B", "A", "B", "A")
)
# Fit the model
model <- clm(response ~ predictor1 + predictor2, data = data)
# Summary of the model
summary(model)
# Check proportional odds assumption
po_test <- nominal_test(model)
print(po_test)
# Visualize fitted probabilities
plot(predict(model, type = "prob"))
library(ordinal)
# Example data
data <- data.frame(
response = factor(c("low", "medium", "high", "medium", "low"), ordered = TRUE),
predictor1 = c(1, 2, 3, 4, 5),
predictor2 = c("A", "B", "A", "B", "A")
)
# Fit the model
model <- clm(response ~ predictor1 + predictor2, data = data)
# Summary of the model
summary(model)
###########################################################################
#
#  Experiment:  GENUINE
#  Programmer:  QUETTIER THOMAS
#  Date:        05/03/2024
#  Description: Pilot signal detection
#
#  Update:      05/03/2024
###########################################################################
# Clearing workspace
rm(list=ls()) # Clear the existing workspace to avoid conflicts
# Load dependencies
devtools::load_all() # Load necessary functions and packages
# replace_csv("session",003) pt 5 session 3 was set to 1
# Data loading
load("data/dataset.RData")
dataset <- dataset %>%
filter(
id != 8, id != 11, id != 19,
id != 30)
data_genuine <- dataset %>%
SliderGenuineDetection()
View(data_genuine)
# Calculating hits, misses, false alarms, and correct rejections
data_genuine <- dataset %>%
SliderGenuineDetection() %>%
gather(signal, score, 5:8)
head(data_genuine)
write.csv(data_genuine, file = "~/Desktop/data_genuine.csv", row.names = FALSE)
model <- clm(score_cat ~ emotion + session + group + signal, data = data_genuine)
model <- clm(score ~ emotion + session + group + signal, data = data_genuine)
# Calculating hits, misses, false alarms, and correct rejections
data_genuine <- dataset %>%
SliderGenuineDetection() %>%
gather(signal, score, 5:8) %>%
mutate(score = factor(score),
emotion = factor(emotion),
session = factor(session),
group = factor(group),
signal = factor(signal))
model <- clm(score ~ emotion + session + group + signal, data = data_genuine)
# Summary of the model
summary(model)
# Check proportional odds assumption
po_test <- nominal_test(model)
print(po_test)
# Visualize fitted probabilities
plot(predict(model, type = "prob"))
# ANOVA-like table for the model
anova_table <- anova(model)
anova_table
# Fit the cumulative link model
model <- clm(score ~ emotion * session * group * signal, data = data_genuine)
# ANOVA-like table for the model
anova_table <- anova(model)
anova_table
# Visualize fitted probabilities
plot(predict(model, type = "prob"))
po_test <- nominal_test(model)
# Calculating hits, misses, false alarms, and correct rejections
data_genuine <- dataset %>%
SliderGenuineDetection() %>%
gather(signal, score, 5:8) %>%
mutate(score = factor(score),
emotion = factor(emotion),
session = factor(session),
group = factor(group),
signal = factor(signal, ordered = TRUE))
# ANOVA-like table for interpreting results
anova_results <- Anova(model, type = "III")
anova_results
posthoc <- emmeans(model, ~ emotion * session * group * signal)
summary(posthoc)
posthoc <- emmeans(model, pairwise ~ emotion | session | group | signal)
posthoc
